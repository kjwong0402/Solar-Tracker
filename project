#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <ArduinoJson.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <Stepper.h>

const char* ssid = "YourSSID";
const char* password = "YourPassword";

// Motor setup (ULN2003)
const int stepsPerRevolution = 2048;
const int motorPin1 = D1; // GPIO5
const int motorPin2 = D2; // GPIO4
const int motorPin3 = D5; // GPIO14
const int motorPin4 = D6; // GPIO12
Stepper myStepper(stepsPerRevolution, motorPin1, motorPin3, motorPin2, motorPin4);

// Tracking state
float currentAngle = 0;

// Location for sunrise/sunset (Osaka example)
const float latitude = 34.6937;
const float longitude = 135.5023;

// NTP Time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 9 * 3600, 60000);  // JST offset

// Timers
unsigned long lastAPICheck = 0;
const unsigned long apiInterval = 24UL * 60UL * 60UL * 1000UL; // 24 hours in milliseconds

// Sunrise/Sunset times (in hours)
float sunriseTime = 6.0;
float sunsetTime = 18.0;

void setup() {
  Serial.begin(115200);
  myStepper.setSpeed(10); // RPM, myStepper.setSpeed -> Arduino build in function
  WiFi.begin(ssid, password); 
  Serial.print("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected!");

  timeClient.begin(); 
  fetchSunriseSunset();
}

void loop() {

  timeClient.update(); // This function synchronizes the current time from the NTP server and updates the internal time held by the NTPClient object. "Fetch the latest time from the internet"
  float currentHour = timeClient.getHours() + (timeClient.getMinutes() / 60.0); // returns the current hour + minutes converted into decimal. 
  Serial.printf("Current time: %.2f\n", currentHour);

  if (millis() - lastAPICheck > apiInterval) {
    fetchSunriseSunset();
  }

    // Only track sun during daylight
  if (currentHour >= sunriseTime && currentHour <= sunsetTime) {
    float angle = mapFloat(currentHour, sunriseTime, sunsetTime, 0, 180);
    moveToAngle(angle);
  }

  delay(60000); // update every minute
}


void fetchSunriseSunset() {
  if (WiFi.status() == WL_CONNECTED) { // Before doing anything, it checks if the ESP8266 is still connected to Wi-Fi. If not connected, it skips the rest of the function.
    HTTPClient http; //the HTTP request (used to communicate with the API).
    WiFiClient client; // the WiFi connection used in that HTTP request. These are standard ESP8266 classes.
    String url = String("http://api.sunrise-sunset.org/json?lat=") + latitude + "&lng=" + longitude + "&formatted=0"; // outputs this as a string http://api.sunrise-sunset.org/json?lat=35.6895&lng=139.6917&formatted=0
    http.begin(client, url); //This tells the http object to start the request using the client and the built URL.

    int httpCode = http.GET(); //Sends an HTTP GET request to the API and stores the response code (like 200 for success).
    if (httpCode == HTTP_CODE_OK) { //Checks if the server returned 200 OK, which means the request was successful. defined in the <ESP8266HTTPClient.h> lib
      String payload = http.getString(); //Reads the response body from the server as a plain text string (JSON format).
      Serial.println("API Response:");
      Serial.println(payload); // prints the payload

      DynamicJsonDocument doc(1024); // Creates a document (with 1024 bytes of memory) to store parsed JSON data using the ArduinoJson library.
      DeserializationError error = deserializeJson(doc, payload);
      if (!error) { //Only proceeds if the JSON was successfully parsed.
        String sunrise = doc["results"]["sunrise"].as<String>();
        String sunset = doc["results"]["sunset"].as<String>();

        sunriseTime = utcToLocalHour(sunrise);
        sunsetTime = utcToLocalHour(sunset);

        Serial.printf("Sunrise: %.2f\n", sunriseTime);
        Serial.printf("Sunset: %.2f\n", sunsetTime);

        lastAPICheck = millis();
      }
    } else {
      Serial.println("Failed to fetch sunrise/sunset data.");
    }
    http.end();
  }
}

float utcToLocalHour(String timeStr) {
  int hour = timeStr.substring(11, 13).toInt();
  int min = timeStr.substring(14, 16).toInt();
  float hourFloat = hour + min / 60.0;
  float jstHour = hourFloat + 9.0;
  if (jstHour >= 24) jstHour -= 24;
  return jstHour;
}

float mapFloat(float x, float in_min, float in_max, float out_min, float out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void moveToAngle(float targetAngle) { // targetAngle is the angle computed from mapFloat
  if (abs(targetAngle - currentAngle) < 1) { // currentAngle is 0 initially 
    Serial.println("Motor already at target.");
    return;
  }
  int steps = (int)((targetAngle - currentAngle) * stepsPerRevolution / 360.0); // computes the angle needed for the motor to move
  myStepper.step(steps); // angle converted into steps for the motor to move
  currentAngle = targetAngle;
  Serial.printf("Moved to %.1f degrees\n", currentAngle);
}